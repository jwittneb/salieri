<
function reset_grid()
  for len = -6, 6 do
    grid[len] = {}
    for wid = -6, 6 do
        grid[len][wid] = {}
        grid[len][wid][1] = "unvisited"
        grid[len][wid][2] = 99
    end
  end

  grid[0][0][1] = "visited"
  grid[0][0][2] = 0
  curr = {0,0}
end

function fill_distances()
  -- presumably the path will be in a 13x13 grid with us centered, otherwise probably not worth persuing
  -- this will need to be changed when dealing with moving towrads stairs

  directions = {{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}}

  --just loop until we are done, guaranteed to return eventually
  for k=1,200 do

    --Update the neighbors of the current node
    for i, v in ipairs(directions) do
      if (curr[1] + v[1] >= -6) and (curr[1] + v[1] <= 6) and (curr[2] + v[2] >= -6) and (curr[2] + v[2] <= 6) then
        feat = view.feature_at(curr[1] + v[1], curr[2] + v[2])
        if (travel.feature_traversable(feat)) then
          if ((grid[curr[1] + v[1]][curr[2] + v[2]][2]) > (grid[curr[1]][curr[2]][2] + 1)) then
            grid[curr[1] + v[1]][curr[2] + v[2]][2] = grid[curr[1]][curr[2]][2] + 1
          end
        else
          grid[curr[1] + v[1]][curr[2] + v[2]][1] = "wall"
        end
      end
    end
    
    --Set current node to visited
    grid[curr[1]][curr[2]][1] = "visited"

    --find next current node, could be done more efficiently with a minheap
    min = 99
    for i = -6, 6 do
      for j = -6, 6 do
        if (grid[i][j][1] == "unvisited") then
          if (grid[i][j][2] < min) then
            min = grid[i][j][2]
            curr[1] = i
            curr[2] = j
          end
        end
      end
    end

    --Return once table is filled
    if (min == 99) then
--      crawl.mpr("success!")
      for i = -6, 6 do
        for j = -6, 6 do
          crawl.mpr(grid[i][j][2])
        end
      end
      return 0
    end
  end
end

--find the shortest path from the current position to (x,y).
--returns a list of characters corresponding to the quickest direction
function djikstra()
  reset_grid()
  fill_distances()
  crawl.mpr("k")
end
>
